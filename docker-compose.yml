version: '3.4'

services:
  productapi:
    container_name: productapi
    restart: always
    image: ${DOCKER_REGISTRY-}productapi
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "5080:80"
    networks:
      - retailerNetwork
    build:
      context: .
      dockerfile: ProductApi/Dockerfile
    depends_on:
      - rabbitmq
  
  productapi-daprd:
    image: "daprio/daprd:edge"
    restart: always
    container_name: productapi-daprd
    command: ["./daprd",
              "-app-id", "productapi",
              "-app-port", "80",
              "-placement-host-address", "dapr-placement:50000",
              "-components-path", "/components",
              "-log-level", "error"]
    volumes:
      - "./components/:/components"
    network_mode: "service:productapi"
    depends_on:
      - productapi
      - rabbitmq

  orderapi:
    container_name: orderapi
    image: ${DOCKER_REGISTRY-}orderapi
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "7080:80"
    networks:
      - retailerNetwork
    build:
      context: .
      dockerfile: OrderApi/Dockerfile
    depends_on:
      - rabbitmq
  
  orderapi-daprd:
    image: "daprio/daprd:edge"
    container_name: orderapi-daprd
    restart: always
    command: ["./daprd",
              "-app-id", "orderapi",
              "-app-port", "80",
              "-placement-host-address", "dapr-placement:50000",
              "-components-path", "/components",
              "-log-level", "error"
    ]
    volumes:
        - "./components/:/components"
    network_mode: "service:orderapi"
    depends_on:
      - orderapi
      - rabbitmq

  customerapi:
    container_name: customerapi
    image: ${DOCKER_REGISTRY-}customerapi
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - "6080:80"
    networks:
      - retailerNetwork
    build:
      context: .
      dockerfile: CustomerApi/Dockerfile
    depends_on:
      - rabbitmq
  
  customerapi-daprd:
    image: "daprio/daprd:edge"
    container_name: customerapi-daprd
    restart: always
    command: ["./daprd",
              "-app-id", "customerapi",
              "-app-port", "80",
              "-placement-host-address", "dapr-placement:50000",
              "-components-path", "/components",
              "-log-level", "error"]
    volumes:
        - "./components/:/components"
    network_mode: "service:customerapi"
    depends_on:
      - customerapi
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
        - RABBITMQ_DEFAULT_USER=guest
        - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - retailerNetwork
    ports:
      - "5672:5672"
      - "15673:15672"
  
  dapr-placement:
    image: "daprio/dapr:edge"
    container_name: dapr-placement
    command: ["./placement",
              "-port", "50000",
              "-log-level", "error"]
    networks:
      - retailerNetwork
        
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - retailerNetwork
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - retailerNetwork

networks:
  retailerNetwork: